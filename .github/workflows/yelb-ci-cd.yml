name: CI/CD Pipeline for Yelb
 
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
 
jobs:
  build_ui:
    runs-on: self-hosted
    needs: [build_appserver]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v3.1.0
        with:
           dockerfile: yelb-ui/Dockerfile
        continue-on-error: true
        
      - name: Build Docker Image
        run: |
          docker build -t yelb-ui:latest yelb-ui 

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Docker Scout Scan
        run: |
          docker scout quickview yelb-ui:latest
        
 
      - name: Tag and Push to Registry
        run: |
           docker tag yelb-ui:latest ${{ secrets.DOCKER_USERNAME }}/yelb-ui:latest
           docker push ${{ secrets.DOCKER_USERNAME }}/yelb-ui:latest

        
 
      # - name: Upload Build Logs
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-logs
      #     path: /tmp/build-logs.txt
 
      - name: Deploy to Staging
        run: |
           echo "Deploying to staging..."
           CONTAINER_NAME=yelb-ui

           echo "Checking if container $CONTAINER_NAME exists..."
           if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
           else
            echo "No existing container named $CONTAINER_NAME. Skipping removal."
           fi
           docker run -d --network yelb-network --name yelb-ui -p 8083:80 ${{ secrets.DOCKER_USERNAME }}/yelb-ui:latest
        
 
   
      # - name: Deploy to Production
      #   if: success()
      #   run: |
      #     echo "Deploying to production..."
      #     # Example: kubectl apply -f prod/deployment.yaml
 
     
  build_appserver:
    runs-on: self-hosted
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v3.1.0
        with:
           dockerfile: yelb-appserver/Dockerfile
        continue-on-error: true
        
 
      - name: Build Docker Image
        run: |
          docker build -t yelb-appserver:latest yelb-appserver 

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

          
      - name: Docker Scout Scan
        run: |
          docker scout quickview yelb-appserver:latest
 
      
      - name: Tag and Push to Registry
        run: |
           docker tag yelb-appserver:latest ${{ secrets.DOCKER_USERNAME }}/yelb-appserver:latest
           docker push ${{ secrets.DOCKER_USERNAME }}/yelb-appserver:latest
      # - name: Upload Build Logs
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-logs
      #     path: /tmp/build-logs-appserver.txt
      - name: Deploy to Staging
        run: |
           echo "Deploying to staging..."
           CONTAINER_NAME=yelb-appserver

           echo "Checking if container $CONTAINER_NAME exists..."
           if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
           else
            echo "No existing container named $CONTAINER_NAME. Skipping removal."
           fi
           docker run -d --network yelb-network --name yelb-appserver -p 4567:4567 ${{ secrets.DOCKER_USERNAME }}/yelb-appserver:latest


  redis-server:
    runs-on: self-hosted
    needs: [build_ui]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Deploy to Staging
        run: |
           echo "Deploying to staging..."
           CONTAINER_NAME=redis-server

           echo "Checking if container $CONTAINER_NAME exists..."
           if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
           else
            echo "No existing container named $CONTAINER_NAME. Skipping removal."
           fi
           docker run -d --network yelb-network --name redis-server -p 6379:6379 redis:4.0.2

        

  build_db:
    runs-on: self-hosted
    needs: [redis-server]
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Hadolint Action
        uses: hadolint/hadolint-action@v3.1.0
        with:
           dockerfile: yelb-db/Dockerfile
        continue-on-error: true
 
      - name: Build Docker Image
        run: |
          docker build -t yelb-db:latest yelb-db

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

          
      - name: Docker Scout Scan
        run: |
          docker scout quickview yelb-db:latest
 
     
      - name: Tag and Push to Registry
        run: |
           docker tag yelb-db:latest ${{ secrets.DOCKER_USERNAME }}/yelb-db:latest
           docker push ${{ secrets.DOCKER_USERNAME }}/yelb-db:latest
      # - name: Upload Build Logs
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-logs
      #     path: /tmp/build-logs-db.txt
      - name: Deploy to Staging
        run: |
           echo "Deploying to staging..."
           CONTAINER_NAME=yelb-db

           echo "Checking if container $CONTAINER_NAME exists..."
           if [ "$(docker ps -aq -f name=$CONTAINER_NAME)" ]; then
            echo "Stopping and removing container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
           else
            echo "No existing container named $CONTAINER_NAME. Skipping removal."
           fi
           docker run -d --network yelb-network --name yelb-db -p 5432:5432 ${{ secrets.DOCKER_USERNAME }}/yelb-db:latest


  Slack-Integration:
       runs-on: self-hosted
       needs: [build_db]
      
       steps:
         - name: Checkout code
           uses: actions/checkout@v3     
 
         # - name: Notify Slack on success
         #   if: success()
         #   run: |
         #     curl -X POST -H 'Content-type: application/json' \
         #     --data '{"text":"Build succeeded on GitHub Actions!"}' \
         #     ${{ secrets.SLACK_WEBHOOK_URL }}
 
         - name: Notify Slack on failure
           if: failure()
           run: |
             curl -X POST -H 'Content-type: application/json' \
             --data '{"text":"Build failed on GitHub Actions."}' \
             { secrets.SLACK_WEBHOOK_URL }}
